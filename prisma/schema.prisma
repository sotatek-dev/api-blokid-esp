// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator prisma-class-generator {
  provider                 = "prisma-class-generator"
  dryRun                   = "false"
  output                   = "dtos"
  useSwagger               = "true"
  makeIndexFile            = "true"
  separateRelationFields   = "true"
  clientImportPath         = "@prisma/client"
  useNonNullableAssertions = "false"
  preserveDefaultNullable  = "false"
}

// -------------------------------- Models ------------------------------
model User {
  id                 Int          @id @default(autoincrement())
  email              String       @unique
  password           String
  fullName           String?
  phoneNumber        String?
  status             UserStatus   @default(Inactive)
  dob                DateTime?
  role               UserRole
  gender             Gender       @default(Other)
  address            String?
  imageLink          String?
  lastActive         DateTime?
  forceResetPassword Boolean      @default(false)
  language           UserLanguage @default(En)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  deletedAt          DateTime?
}

model TargetPerson {
  id               Int              @id @default(autoincrement())
  firstname        String?
  lastname         String?
  email            String?
  emailHash        String?
  address          String? // todo: what if TargetPerson.address != Enrichment.address
  linkedinUrl      String?
  phoneNumber      String?
  enrichmentStatus EnrichmentStatus @default(NoEnrichment)
  intentScore      Float?
  targetCompanyId  Int?
  locality         String?
  region           String?
  postalCode       String?
  school           String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?

  TargetCompany TargetCompany? @relation(fields: [targetCompanyId], references: [id])
  Footprint     Footprint[]
  Enrichment    Enrichment[]
}

// save enrichment data from peopledatalab
model Enrichment {
  id                       Int            @id @default(autoincrement())
  targetPersonId           Int
  seniorityLevel           Int?
  managementResponsibility Boolean?
  role                     String?
  customTags               Json?
  companyName              String?
  lastestSeen              Json?
  department               String?
  address                  String? // todo: what if TargetPerson.address != Enrichment.address
  emailStatus              EmailStatus
  type                     EnrichmentType
  response                 Json?
  request                  Json?
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  deletedAt                DateTime?

  TargetPerson TargetPerson @relation(fields: [targetPersonId], references: [id])
}

model TargetCompany {
  id             Int       @id @default(autoincrement())
  name           String?
  overview       String?   @db.Text
  ticker         String?
  website        String?   @unique
  profileUrl     String?   @unique
  location       String?
  street         String?
  locality       String?
  region         String?
  country        String?
  postalCode     String?
  industry       String?
  companyDomain  String?
  companySize    String?
  parentCompany  String?
  companyRevenue String?
  hqLocation     String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  TargetPerson TargetPerson[]
}

model Footprint {
  id             Int             @id @default(autoincrement())
  targetPersonId Int
  action         FootprintAction
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?

  TargetPerson TargetPerson @relation(fields: [targetPersonId], references: [id])
}

// -------------------------------- Enums -------------------------------
enum UserRole {
  Admin
  User
  Business
}

enum UserStatus {
  Active
  Inactive
  Closed
}

enum Gender {
  Male
  Female
  Other
}

enum UserLanguage {
  En
  Vn
}

enum FootprintAction {
  ClickAd
}

enum EnrichmentType {
  Person
  Company
}

enum EmailStatus {
  Valid
  Invalid
}

enum EnrichmentStatus {
  InProgress
  Completed
  Failed
  NoEnrichment
}
