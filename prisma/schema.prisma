// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator prisma-class-generator {
  provider                 = "prisma-class-generator"
  dryRun                   = "false"
  output                   = "dtos"
  useSwagger               = "true"
  makeIndexFile            = "true"
  separateRelationFields   = "true"
  clientImportPath         = "@prisma/client"
  useNonNullableAssertions = "false"
  preserveDefaultNullable  = "false"
}

// -------------------------------- Models ------------------------------
model User {
  id                 Int          @id @default(autoincrement())
  email              String       @unique
  password           String
  fullName           String?
  phoneNumber        String?
  status             UserStatus   @default(Inactive)
  dob                DateTime?
  role               UserRole
  gender             Gender       @default(Other)
  address            String?
  imageLink          String?
  lastActive         DateTime?
  forceResetPassword Boolean      @default(false)
  language           UserLanguage @default(En)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  deletedAt          DateTime?

  TargetCompany TargetCompany[]
}

model Campaign {
  id                Int              @id @default(autoincrement())
  campaignName      String
  budget            Float?
  spend             Float?
  remaining         Float
  reached           Float // percentage
  startDate         DateTime
  endDate           DateTime?
  status            CampaignStatus
  objective         CampainObjective
  description       String?
  geography         Json // string[]
  role              Json // string[]
  targetCompanyId   Int
  campaignMetricId  Int              @unique
  isBugdetByChannel Boolean          @default(false) // maybe enum
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?

  CampaignMetric   CampaignMetric     @relation(fields: [campaignMetricId], references: [id])
  TargetCompany    TargetCompany      @relation(fields: [targetCompanyId], references: [id])
  CampaignStrategy CampaignStrategy[]
}

model CampaignStrategy {
  id               Int                     @id @default(autoincrement())
  status           CampaignStatus
  channel          CampaignStrategyChannel
  budget           Float
  format           StrategyAdFormat // single image, single video
  creativeLink     String? //  image link
  content          String?
  startDate        DateTime?
  finishDate       DateTime?
  campaignId       Int
  campaignMetricId Int                     @unique
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  deletedAt        DateTime?

  Campaign       Campaign       @relation(fields: [campaignId], references: [id])
  CampaignMetric CampaignMetric @relation(fields: [campaignMetricId], references: [id])
}

model CampaignMetric {
  id            Int       @id @default(autoincrement())
  spend         Float?
  account       Int?
  impressions   Int?
  avgTimeOnSite Float?
  performance   Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  Campaign         Campaign?
  CampaignStrategy CampaignStrategy?
}

// Personal who create by target upload (csv)
model TargetPerson {
  id                 Int              @id @default(autoincrement())
  firstName          String?
  lastName           String?
  fullName           String?
  companyName        String?
  linkedinProfileUrl String?
  email              String?
  phoneNumber        String?
  position           String?
  department         String?
  enrichmentStatus   EnrichmentStatus @default(NoEnrichment)
  intentScore        Float?
  targetCompanyId    Int?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deletedAt          DateTime?

  Footprint          Footprint[]
  Enrichment         PersonEnrichment[]
  EnrichmentRaw      EnrichmentRaw[]
  IdentifyResolution IdentifyResolution[]
}

model PersonEnrichment {
  id             Int       @id @default(autoincrement())
  fullName       String?
  gender         String?
  title          String?
  email          String?
  emailStatus    String?
  linkedin       String?
  phoneNumber    String?
  address        String?
  company        String?
  department     String?
  position       String?
  companyName    String?
  targetPersonId Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  TargetPerson TargetPerson @relation(fields: [targetPersonId], references: [id])
}

// save enrichment data from peopledatalab
// system read only
model EnrichmentRaw {
  id             Int            @id @default(autoincrement())
  targetPersonId Int
  targetList     Json
  request        Json
  response       Json?
  type           EnrichmentType
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?

  TargetPerson TargetPerson? @relation(fields: [targetPersonId], references: [id])
}

model TargetCompany {
  id        Int       @id @default(autoincrement())
  userId    Int?
  name      String
  geography String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User     User?      @relation(fields: [userId], references: [id])
  Campaign Campaign[]
}

model Footprint {
  id            Int              @id @default(autoincrement())
  action        FootprintAction
  element       FootprintElement
  description   String //
  priorityLevel PriorityLevel
  intentScore   Float?
  confidence    Float?
  personId      Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deletedAt     DateTime?

  TargetPerson TargetPerson @relation(fields: [personId], references: [id])
}

model IdentifyResolution {
  id                Int       @id @default(autoincrement())
  personId          Int
  email             String?
  emailHash         String?
  ip                String?
  uid               String?
  deviceFingerprint String?
  confidence        Float?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  TargetPerson TargetPerson @relation(fields: [personId], references: [id])
}

// -------------------------------- Enums -------------------------------
enum UserRole {
  Admin
  User
  Business
}

enum UserStatus {
  Active
  Inactive
  Closed
}

enum Gender {
  Male
  Female
  Other
}

enum UserLanguage {
  En
  Vn
}

enum FootprintAction {
  Click
  Download
  View
  SubmitForm
  Visit
  Share
}

enum EnrichmentType {
  Person
  Company
}

enum EmailStatus {
  Valid
  Invalid
}

enum EnrichmentStatus {
  InProgress
  Completed
  Failed
  NoEnrichment
}

enum PriorityLevel {
  HIGH
  MEDIUM
  LOW
}

enum FootprintElement {
  Ads
  Button
  Link
  Form
  Page
  Content
}

enum CampaignStatus {
  Active
  Suspended
  WaitingToLaunch
  Completed
  Paused
  Cancelled
}

enum CampainObjective {
  Nurture
  Engagement
  Awareness
}

enum CampaignStrategyChannel {
  GoogleAds
  LinkedIn
  DV360
}

enum StrategyAdFormat {
  SingleImage
  SingleVideo
}
