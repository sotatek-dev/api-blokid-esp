import { OmitType } from '@nestjs/mapped-types';
import { PartialType } from '@nestjs/swagger';
import {
  CampaignStatus,
  CampaignStrategyChannel,
  CampainObjective,
  StrategyAdFormat,
} from '@prisma/client';
import { JsonValue } from '@prisma/client/runtime/library';
import { Exclude, Transform, Type } from 'class-transformer';
import {
  ArrayNotEmpty,
  IsBoolean,
  IsNotEmpty,
  IsOptional,
  ValidateIf,
  ValidateNested,
} from 'class-validator';
import { PaginationQueryDto } from 'src/core/platform/dtos';
import { PropertyDto } from 'src/decorators';
import { CampaignBuilderStep } from 'src/modules/campaign/campaign.enum';

const { INFORMATION, TARGET, STRATEGY, BUDGET, PREVIEW } = CampaignBuilderStep;

// Auto generated by tools/generate-dtos.ts at 2025-04-16T06:51:27.951Z
// ****************************** Base Campaign response dto ******************************
export class BaseCampaignResponseDto {
  @PropertyDto()
  id: number;

  @PropertyDto()
  campaignName: string;

  @PropertyDto()
  budget: number;

  @PropertyDto()
  spend: number;

  @PropertyDto()
  remaining: number;

  @PropertyDto()
  reached: number;

  @PropertyDto()
  startDate: Date;

  @PropertyDto()
  endDate: Date;

  @PropertyDto()
  status: CampaignStatus;

  @PropertyDto()
  objective: CampainObjective;

  @PropertyDto()
  description: string;

  @PropertyDto()
  geography: JsonValue;

  @PropertyDto()
  role: JsonValue;

  @PropertyDto()
  executiveCompanyId: number;

  @PropertyDto()
  campaignMetricId: number;

  @PropertyDto()
  isBugdetByChannel: boolean;

  @PropertyDto()
  createdAt: Date;
}

// ****************************** GET Campaign dto ******************************
export class GetCampaignDetailResponseDto extends BaseCampaignResponseDto {
  // Add more fields if needed such as relations
}

export class GetCampaignListResponseDto extends BaseCampaignResponseDto {
  // Add more fields if needed such as relations
}

export class GetCampaignListQueryDto extends PaginationQueryDto {
  @PropertyDto({
    type: Number,
    required: false,
    validated: true,
  })
  id: number;

  @PropertyDto({
    type: String,
    required: false,
    validated: true,
  })
  campaignName: string;

  @PropertyDto({
    type: Number,
    required: false,
    validated: true,
  })
  budget: number;

  @PropertyDto({
    type: Number,
    required: false,
    validated: true,
  })
  spend: number;

  @PropertyDto({
    type: Number,
    required: false,
    validated: true,
  })
  remaining: number;

  @PropertyDto({
    type: Number,
    required: false,
    validated: true,
  })
  reached: number;

  @PropertyDto({
    type: Date,
    required: false,
    validated: true,
  })
  startDateRangeStart: Date;

  @PropertyDto({
    type: Date,
    required: false,
    validated: true,
  })
  startDateRangeEnd: Date;

  @PropertyDto({
    type: Date,
    required: false,
    validated: true,
  })
  endDateRangeStart: Date;

  @PropertyDto({
    type: Date,
    required: false,
    validated: true,
  })
  endDateRangeEnd: Date;

  @PropertyDto({
    type: CampaignStatus,
    required: false,
    validated: true,
    structure: 'enum',
  })
  status: CampaignStatus;

  @PropertyDto({
    type: CampainObjective,
    required: false,
    validated: true,
    structure: 'enum',
  })
  objective: CampainObjective;

  @PropertyDto({
    type: String,
    required: false,
    validated: true,
  })
  description: string;

  @PropertyDto({
    type: Object,
    required: false,
    validated: true,
  })
  geography: object;

  @PropertyDto({
    type: Object,
    required: false,
    validated: true,
  })
  role: object;

  @PropertyDto({
    type: Number,
    required: false,
    validated: true,
  })
  executiveCompanyId: number;

  @PropertyDto({
    type: Number,
    required: false,
    validated: true,
  })
  campaignMetricId: number;

  @PropertyDto({
    type: Boolean,
    required: false,
    validated: true,
  })
  isBugdetByChannel: boolean;

  @PropertyDto({
    type: Date,
    required: false,
    validated: true,
  })
  createdAtRangeStart: Date;

  @PropertyDto({
    type: Date,
    required: false,
    validated: true,
  })
  createdAtRangeEnd: Date;
}

// ****************************** CREATE Campaign dto ******************************
// todo: delete this line if you have corrected the dto
export class ValidateCampaignStrategyDto {
  @Exclude()
  @IsOptional()
  step?: number;

  @Exclude()
  @IsOptional()
  isBudgetByChannel?: boolean;

  @PropertyDto({
    type: CampaignStatus,
    required: false,
    validated: true,
    structure: 'enum',
  })
  @ValidateIf((obj) => obj.step === PREVIEW)
  @Transform(({ obj, value }) => value ?? CampaignStatus.Active)
  status: CampaignStatus;

  @PropertyDto({
    type: CampaignStrategyChannel,
    required: true,
    validated: true,
    structure: 'enum',
  })
  @ValidateIf((obj) => [STRATEGY, PREVIEW].includes(obj.step))
  channel: CampaignStrategyChannel;

  @PropertyDto({
    type: StrategyAdFormat,
    required: true,
    validated: true,
    structure: 'enum',
  })
  @ValidateIf((obj) => [STRATEGY, PREVIEW].includes(obj.step))
  format: StrategyAdFormat;

  @PropertyDto({
    type: String,
    required: true,
    validated: true,
  })
  @ValidateIf((obj) => [STRATEGY, PREVIEW].includes(obj.step))
  creativeLink: string;

  @PropertyDto({
    type: String,
    required: true,
    validated: true,
  })
  @ValidateIf((obj) => [STRATEGY, PREVIEW].includes(obj.step))
  content: string;

  @PropertyDto({
    type: Number,
    required: true,
    validated: true,
  })
  @ValidateIf(
    (obj) => [BUDGET, PREVIEW].includes(obj.step) && obj.isBudgetByChannel === true,
  )
  budget: number;
}

export class CreateCampaignRequestDto {
  @PropertyDto({
    type: CampaignBuilderStep,
    required: true,
    validated: true,
    structure: 'enum',
  })
  step: number;

  @PropertyDto({
    type: String,
    required: true,
    validated: true,
  })
  @ValidateIf((obj) => [INFORMATION, PREVIEW].includes(obj.step))
  campaignName: string;

  @PropertyDto({
    type: CampainObjective,
    required: true,
    validated: true,
    structure: 'enum',
  })
  @ValidateIf((obj) => [INFORMATION, PREVIEW].includes(obj.step))
  objective: CampainObjective;

  @PropertyDto({
    type: Date,
    required: true,
    validated: true,
  })
  @Type(() => Date)
  @ValidateIf((obj) => [INFORMATION, PREVIEW].includes(obj.step))
  startDate: Date;

  @PropertyDto({
    type: Date,
    required: true,
    validated: true,
  })
  @Type(() => Date)
  @ValidateIf((obj) => [INFORMATION, PREVIEW].includes(obj.step))
  endDate: Date;

  @PropertyDto({
    type: String,
    required: false,
    validated: true,
  })
  description: string;

  @PropertyDto({
    type: Object,
    required: true,
    validated: true,
  })
  @ValidateIf((obj) => obj.step === PREVIEW)
  geography: object;

  @PropertyDto({
    type: Object,
    required: true,
    validated: true,
  })
  @ValidateIf((obj) => obj.step === PREVIEW)
  role: object;

  @PropertyDto({
    type: Number,
    required: true,
    validated: true,
  })
  @ValidateIf((obj) => obj.step === PREVIEW)
  executiveCompanyId: number;

  @IsBoolean()
  @IsNotEmpty()
  @ValidateIf((obj) => [BUDGET, PREVIEW].includes(obj.step))
  isBugdetByChannel: boolean;

  @PropertyDto({
    type: Number,
    required: true,
    validated: true,
  })
  @ValidateIf((obj) => [BUDGET, PREVIEW].includes(obj.step))
  budget: number;

  @PropertyDto({
    type: Number,
    required: false,
    validated: true,
  })
  @ValidateIf((obj) => obj.step === PREVIEW)
  @Transform(({ obj, value }) => value ?? 0)
  spend: number;

  @PropertyDto({
    type: Number,
    required: false,
    validated: true,
  })
  @ValidateIf((obj) => obj.step === PREVIEW)
  @Transform(({ obj, value }) => value ?? obj.budget)
  remaining: number;

  @PropertyDto({
    type: Number,
    required: false,
    validated: true,
  })
  @ValidateIf((obj) => obj.step === PREVIEW)
  @Transform(({ obj, value }) => value ?? 0)
  reached: number;

  @PropertyDto({
    type: CampaignStatus,
    required: false,
    validated: true,
    structure: 'enum',
  })
  @ValidateIf((obj) => obj.step === PREVIEW)
  @Transform(({ obj, value }) => value ?? CampaignStatus.Active)
  status: CampaignStatus;

  @PropertyDto({
    type: ValidateCampaignStrategyDto,
    required: true,
    validated: true,
    structure: 'array',
  })
  @ArrayNotEmpty({ message: 'campaignStrategies should not be empty' })
  @ValidateNested({ each: true })
  @Type(() => ValidateCampaignStrategyDto)
  @ValidateIf((obj) => [STRATEGY, BUDGET, PREVIEW].includes(obj.step))
  @Transform(({ value, obj }) => {
    if (Array.isArray(value)) {
      return value.map((strategy) => {
        // Pass parent context to each strategy
        strategy.step = obj.step;
        strategy.isBudgetByChannel = obj.isBugdetByChannel;
        return strategy;
      });
    }
    return value;
  })
  campaignStrategies: ValidateCampaignStrategyDto[];
}

export class CreateCampaignStrategyDto extends OmitType(ValidateCampaignStrategyDto, [
  'step',
  'isBudgetByChannel',
] as const) {
  @PropertyDto()
  campaignId: number;

  @PropertyDto()
  campaignMetricId: number;
}

export class CreateCampaignBodyDto extends OmitType(CreateCampaignRequestDto, [
  'step',
  'campaignStrategies',
] as const) {
  @PropertyDto()
  campaignMetricId: number;
}

export class CreateCampaignResponseDto extends BaseCampaignResponseDto {}

// ****************************** UPDATE Campaign dto ******************************
// todo: delete this line if you have corrected the dto
export class UpdateCampaignBodyDto extends PartialType(CreateCampaignBodyDto) {
  // User OmitType if needed
}

export class UpdateCampaignResponseDto extends BaseCampaignResponseDto {}

// ****************************** More Campaign dto below ******************************
